[
  {
    "id": "1758941319497534",
    "text": "// Update context menu creation - remove tag submenus\nchrome.runtime.onInstalled.addListener(() => {\n  // Remove the tag submenu creation entirely\n  // Just keep the main save option\n  chrome.contextMenus.create({\n    id: \"saveToMemory\",\n    title: \"Save to Memory\",\n    contexts: [\"selection\"],\n  });\n\n  // Remove all the tag submenu creation code:\n  /*\n  const tags = [\"Info\", \"Reference\", \"Content\", \"Series\", \"Code\", \"URL\"];\n  tags.forEach((tag) => {\n    chrome.contextMenus.create({\n      id: `saveWithTag_${tag}`,\n      title: tag,\n      parentId: \"saveToMemory\",\n      contexts: [\"selection\"],\n    });\n  });\n  */\n\n  // Keep screenshot context menu\n  chrome.contextMenus.create({\n    id: \"captureVisibleTab\",\n    title: \"ðŸ“¸ Capture Visible Tab\",\n    contexts: [\"all\"],\n    documentUrlPatterns: [\"http://*/*\", \"https://*/*\"],\n  });\n});\n\n// Simplify the click handler - remove tag-specific saving\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  // Handle regular text save (no tags)\n  if (info.menuItemId === \"saveToMemory\" && info.selectionText) {\n    const detected = detectType(info.selectionText);\n\n    const newItem = {\n      id: Date.now().toString() + Math.floor(Math.random() * 1000),\n      text: info.selectionText,\n      created: new Date().toISOString(),\n      color: randomColor(),\n      pinned: false,\n      tags: [\"untitled\"], // Default tag only\n      type: detected.type,\n      meta: {\n        ...(detected.meta || {}),\n        sourceUrl: tab.url,\n      },\n      versions: [],\n    };\n\n    chrome.storage.local.get({ memory: [] }, (res) => {\n      const updated = [newItem, ...res.memory];\n      chrome.storage.local.set({ memory: updated });\n    });\n    return;\n  }\n\n  // Remove all the tag-specific handling:\n  /*\n  if (info.menuItemId.startsWith(\"saveWithTag_\") && info.selectionText) {\n    // ... removed code ...\n  }\n  */\n\n  // Keep screenshot handler unchanged\n  if (info.menuItemId === \"captureVisibleTab\") {\n    // ... existing screenshot code ...\n  }\n});// Update context menu creation - remove tag submenus\nchrome.runtime.onInstalled.addListener(() => {\n  // Remove the tag submenu creation entirely\n  // Just keep the main save option\n  chrome.contextMenus.create({\n    id: \"saveToMemory\",\n    title: \"Save to Memory\",\n    contexts: [\"selection\"],\n  });\n\n  // Remove all the tag submenu creation code:\n  /*\n  const tags = [\"Info\", \"Reference\", \"Content\", \"Series\", \"Code\", \"URL\"];\n  tags.forEach((tag) => {\n    chrome.contextMenus.create({\n      id: `saveWithTag_${tag}`,\n      title: tag,\n      parentId: \"saveToMemory\",\n      contexts: [\"selection\"],\n    });\n  });\n  */\n\n  // Keep screenshot context menu\n  chrome.contextMenus.create({\n    id: \"captureVisibleTab\",\n    title: \"ðŸ“¸ Capture Visible Tab\",\n    contexts: [\"all\"],\n    documentUrlPatterns: [\"http://*/*\", \"https://*/*\"],\n  });\n});\n\n// Simplify the click handler - remove tag-specific saving\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  // Handle regular text save (no tags)\n  if (info.menuItemId === \"saveToMemory\" && info.selectionText) {\n    const detected = detectType(info.selectionText);\n\n    const newItem = {\n      id: Date.now().toString() + Math.floor(Math.random() * 1000),\n      text: info.selectionText,\n      created: new Date().toISOString(),\n      color: randomColor(),\n      pinned: false,\n      tags: [\"untitled\"], // Default tag only\n      type: detected.type,\n      meta: {\n        ...(detected.meta || {}),\n        sourceUrl: tab.url,\n      },\n      versions: [],\n    };\n\n    chrome.storage.local.get({ memory: [] }, (res) => {\n      const updated = [newItem, ...res.memory];\n      chrome.storage.local.set({ memory: updated });\n    });\n    return;\n  }\n\n  // Remove all the tag-specific handling:\n  /*\n  if (info.menuItemId.startsWith(\"saveWithTag_\") && info.selectionText) {\n    // ... removed code ...\n  }\n  */\n\n  // Keep screenshot handler unchanged\n  if (info.menuItemId === \"captureVisibleTab\") {\n    // ... existing screenshot code ...\n  }\n});// Update context menu creation - remove tag submenus\nchrome.runtime.onInstalled.addListener(() => {\n  // Remove the tag submenu creation entirely\n  // Just keep the main save option\n  chrome.contextMenus.create({\n    id: \"saveToMemory\",\n    title: \"Save to Memory\",\n    contexts: [\"selection\"],\n  });\n\n  // Remove all the tag submenu creation code:\n  /*\n  const tags = [\"Info\", \"Reference\", \"Content\", \"Series\", \"Code\", \"URL\"];\n  tags.forEach((tag) => {\n    chrome.contextMenus.create({\n      id: `saveWithTag_${tag}`,\n      title: tag,\n      parentId: \"saveToMemory\",\n      contexts: [\"selection\"],\n    });\n  });\n  */\n\n  // Keep screenshot context menu\n  chrome.contextMenus.create({\n    id: \"captureVisibleTab\",\n    title: \"ðŸ“¸ Capture Visible Tab\",\n    contexts: [\"all\"],\n    documentUrlPatterns: [\"http://*/*\", \"https://*/*\"],\n  });\n});\n\n// Simplify the click handler - remove tag-specific saving\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  // Handle regular text save (no tags)\n  if (info.menuItemId === \"saveToMemory\" && info.selectionText) {\n    const detected = detectType(info.selectionText);\n\n    const newItem = {\n      id: Date.now().toString() + Math.floor(Math.random() * 1000),\n      text: info.selectionText,\n      created: new Date().toISOString(),\n      color: randomColor(),\n      pinned: false,\n      tags: [\"untitled\"], // Default tag only\n      type: detected.type,\n      meta: {\n        ...(detected.meta || {}),\n        sourceUrl: tab.url,\n      },\n      versions: [],\n    };\n\n    chrome.storage.local.get({ memory: [] }, (res) => {\n      const updated = [newItem, ...res.memory];\n      chrome.storage.local.set({ memory: updated });\n    });\n    return;\n  }\n\n  // Remove all the tag-specific handling:\n  /*\n  if (info.menuItemId.startsWith(\"saveWithTag_\") && info.selectionText) {\n    // ... removed code ...\n  }\n  */\n\n  // Keep screenshot handler unchanged\n  if (info.menuItemId === \"captureVisibleTab\") {\n    // ... existing screenshot code ...\n  }\n});",
    "created": "2025-09-27T02:48:39.497Z",
    "color": "hsl(102 66% 50%)",
    "pinned": false,
    "tags": [
      "Z-NTA"
    ],
    "type": "text",
    "meta": {},
    "versions": []
  },
  {
    "color": "hsl(53 67% 52%)",
    "created": "2025-09-26T14:34:08.162Z",
    "id": "1758897248162856",
    "pinned": false,
    "tags": [
      "Facebook",
      "Anime"
    ],
    "text": "Screenshot from Facebook",
    "type": "image",
    "versions": [
      {
        "date": "2025-09-26T14:35:30.211Z",
        "text": "Screenshot from Facebook"
      }
    ],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.facebook.com",
      "imageStored": false,
      "sourceUrl": "https://www.facebook.com/reel/1309343457203842"
    }
  },
  {
    "color": "hsl(241 71% 50%)",
    "created": "2025-09-26T14:20:06.416Z",
    "id": "175889640641682",
    "pinned": false,
    "tags": [
      "Youtube"
    ],
    "text": "Screenshot from Minecraft Optical Illusion That Broke My Brain! | minecraft optical illusion #shorts #minecraftshort - YouTube",
    "type": "image",
    "versions": [],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.youtube.com",
      "imageStored": false,
      "sourceUrl": "https://www.youtube.com/shorts/fWHLn3yTgKw"
    }
  },
  {
    "color": "hsl(229 68% 51%)",
    "created": "2025-09-26T14:22:49.843Z",
    "id": "175889656984390",
    "pinned": false,
    "tags": [
      "Youtube",
      "Anime"
    ],
    "text": "Screenshot from The Moment Kafka Hibino Gains His Aura ðŸ˜±âš¡ - YouTube",
    "type": "image",
    "versions": [
      {
        "date": "2025-09-26T14:35:10.903Z",
        "text": "Screenshot from The Moment Kafka Hibino Gains His Aura ðŸ˜±âš¡ - YouTube"
      },
      {
        "date": "2025-09-26T14:34:53.406Z",
        "text": "Screenshot from The Moment Kafka Hibino Gains His Aura ðŸ˜±âš¡ - YouTube"
      }
    ],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.youtube.com",
      "imageStored": false,
      "sourceUrl": "https://www.youtube.com/shorts/ACV1hTdrKzg"
    }
  },
  {
    "color": "hsl(296 60% 45%)",
    "created": "2025-09-26T14:28:56.585Z",
    "id": "1758896936585295",
    "pinned": false,
    "tags": [
      "Youtube"
    ],
    "text": "Screenshot from #banaraslitfest - YouTube",
    "type": "image",
    "versions": [],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.youtube.com",
      "imageStored": false,
      "sourceUrl": "https://www.youtube.com/shorts/hv875Jz4ZKo"
    }
  },
  {
    "color": "hsl(50 67% 47%)",
    "created": "2025-09-26T14:29:32.503Z",
    "id": "1758896972503870",
    "pinned": false,
    "tags": [
      "Youtube"
    ],
    "text": "Screenshot from Cool website âœ… - YouTube",
    "type": "image",
    "versions": [],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.youtube.com",
      "imageStored": false,
      "sourceUrl": "https://www.youtube.com/shorts/-qtqbHeYJVQ"
    }
  }
]