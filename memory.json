[
  {
    "id": "1758939887771843",
    "text": "// Add these variables at the top with other state variables\nlet listView = true; // list by default\nlet groupBy = null; // 'tag' | 'date' | null\nlet settings = { \n  theme: \"gradient\", \n  accent: \"#2ea6ff\", \n  fontSize: 13,\n  listView: true // Add layout preference to settings\n};\n\n// Modify the applySettings function to handle layout\nfunction applySettings() {\n  document.documentElement.style.setProperty(\"--accent\", settings.accent);\n  document.documentElement.style.setProperty(\n    \"--font-size\",\n    settings.fontSize + \"px\"\n  );\n  \n  // Apply layout preference\n  listView = settings.listView !== false; // Default to true if not set\n  updateLayoutView();\n  \n  // Rest of your existing theme code...\n  if (settings.theme === \"light\") {\n    document.body.style.background = \"linear-gradient(135deg,#f4f7fb,#e9eef7)\";\n    document.body.style.color = \"#111\";\n  } else if (settings.theme === \"dark\") {\n    document.body.style.background = \"linear-gradient(135deg,#050607,#0b0c0d)\";\n    document.body.style.color = \"#e6eef6\";\n  } else {\n    document.body.style.background =\n      \"linear-gradient(135deg,var(--bg1),var(--bg2))\";\n    document.body.style.color = \"#e6eef6\";\n  }\n}\n\n// Add this function to update layout view\nfunction updateLayoutView() {\n  if (listView) {\n    listContainer.classList.remove(\"grid-view\");\n    listContainer.classList.add(\"list-view\");\n    viewToggle.textContent = \"â–¦\"; // Grid icon\n  } else {\n    listContainer.classList.remove(\"list-view\");\n    listContainer.classList.add(\"grid-view\");\n    viewToggle.textContent = \"â‰¡\"; // List icon\n  }\n}\n\n// Modify the view toggle event handler\nviewToggle.addEventListener(\"click\", () => {\n  listView = !listView;\n  settings.listView = listView;\n  saveSettingsToStorage(); // Save the preference\n  updateLayoutView();\n});\n\n// Update the renderItem function to add show more functionality\nfunction renderItem(item) {\n  const li = document.createElement(\"li\");\n  li.className = \"memory-item\";\n  li.dataset.id = item.id;\n  li.dataset.type = item.type || \"text\";\n\n  // ... existing toolbar code ...\n\n  // body - modified to include show more functionality\n  const body = document.createElement(\"div\");\n  \n  if (item.type === \"url\") {\n    // ... existing URL code ...\n  } else if (item.type === \"code\") {\n    const pre = document.createElement(\"pre\");\n    const code = document.createElement(\"code\");\n    code.innerHTML = window.SimpleHighlighter.highlight(item.text);\n    pre.appendChild(code);\n    \n    // Add show more functionality for code\n    if (item.text.length > 300) { // Only add if content is long\n      const showMoreBtn = document.createElement(\"button\");\n      showMoreBtn.className = \"show-more-btn\";\n      showMoreBtn.textContent = \"Show more\";\n      showMoreBtn.addEventListener(\"click\", (e) => {\n        e.stopPropagation();\n        toggleContentExpansion(pre, showMoreBtn, item);\n      });\n      \n      body.appendChild(pre);\n      body.appendChild(showMoreBtn);\n    } else {\n      body.appendChild(pre);\n    }\n  } else if (item.type === \"mixed\") {\n    // ... existing mixed content code ...\n  } else {\n    const p = document.createElement(\"p\");\n    p.className = \"item-text\";\n    p.textContent = item.text;\n    \n    // Add click to view full content\n    p.addEventListener(\"click\", () => {\n      showFullContent(item);\n    });\n    \n    // Add show more functionality for long text\n    if (item.text.length > 200) { // Only add if content is long\n      const showMoreBtn = document.createElement(\"button\");\n      showMoreBtn.className = \"show-more-btn\";\n      showMoreBtn.textContent = \"Show more\";\n      showMoreBtn.addEventListener(\"click\", (e) => {\n        e.stopPropagation();\n        toggleContentExpansion(p, showMoreBtn, item);\n      });\n      \n      body.appendChild(p);\n      body.appendChild(showMoreBtn);\n    } else {\n      body.appendChild(p);\n    }\n    \n    // ... rest of existing code for source URL ...\n  }\n\n  // ... rest of existing renderItem code ...\n\n  return li;\n}\n\n// Add these new functions for content expansion\nfunction toggleContentExpansion(element, button, item) {\n  const isExpanded = element.classList.contains(\"expanded\");\n  \n  if (isExpanded) {\n    element.classList.remove(\"expanded\");\n    button.textContent = \"Show more\";\n  } else {\n    element.classList.add(\"expanded\");\n    button.textContent = \"Show less\";\n    \n    // Scroll the element into view if it's being expanded\n    element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n  }\n}\n\nfunction showFullContent(item) {\n  const viewer = document.createElement(\"div\");\n  viewer.id = \"content-viewer\";\n  \n  viewer.innerHTML = `\n    <div class=\"content-container\">\n      <button class=\"close-btn\">Ã—</button>\n      <div class=\"content-meta\">\n        <strong>${formatDate(item.created)}</strong> | \n        Tags: ${(item.tags || []).join(', ')}\n      </div>\n      <div class=\"content-body\">${item.type === 'code' ? \n        '<pre><code>' + window.SimpleHighlighter.highlight(item.text) + '</code></pre>' : \n        item.text}</div>\n    </div>\n  `;\n  \n  viewer.querySelector(\".close-btn\").addEventListener(\"click\", () => {\n    viewer.remove();\n  });\n  \n  viewer.addEventListener(\"click\", (e) => {\n    if (e.target === viewer) viewer.remove();\n  });\n  \n  // Close with Escape key\n  document.addEventListener(\"keydown\", function closeOnEscape(e) {\n    if (e.key === \"Escape\") {\n      viewer.remove();\n      document.removeEventListener(\"keydown\", closeOnEscape);\n    }\n  });\n  \n  document.body.appendChild(viewer);\n}\n\n// Modify the saveSettingsToStorage function to include layout preference\nfunction saveSettingsToStorage() {\n  chrome.storage.local.set({ settings }, () => applySettings());\n}\n\n// Ensure settings are loaded properly in getMemory function\nfunction getMemory(cb) {\n  chrome.storage.local.get(\n    { memory: [], settings: {}, githubConfig: {} },\n    async (res) => {\n      if (res.settings) {\n        settings = Object.assign(settings, res.settings);\n        // Ensure listView setting is properly set\n        listView = settings.listView !== false;\n      }\n      // ... rest of existing getMemory code ...\n    }\n  );\n}",
    "created": "2025-09-27T02:24:47.771Z",
    "color": "hsl(167 66% 52%)",
    "pinned": false,
    "tags": [
      "untitled",
      "Code",
      "Reference"
    ],
    "type": "text",
    "meta": {},
    "versions": []
  },
  {
    "color": "hsl(53 67% 52%)",
    "created": "2025-09-26T14:34:08.162Z",
    "id": "1758897248162856",
    "pinned": false,
    "tags": [
      "Facebook",
      "Anime"
    ],
    "text": "Screenshot from Facebook",
    "type": "image",
    "versions": [
      {
        "date": "2025-09-26T14:35:30.211Z",
        "text": "Screenshot from Facebook"
      }
    ],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.facebook.com",
      "imageStored": false,
      "sourceUrl": "https://www.facebook.com/reel/1309343457203842"
    }
  },
  {
    "color": "hsl(241 71% 50%)",
    "created": "2025-09-26T14:20:06.416Z",
    "id": "175889640641682",
    "pinned": false,
    "tags": [
      "Youtube"
    ],
    "text": "Screenshot from Minecraft Optical Illusion That Broke My Brain! | minecraft optical illusion #shorts #minecraftshort - YouTube",
    "type": "image",
    "versions": [],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.youtube.com",
      "imageStored": false,
      "sourceUrl": "https://www.youtube.com/shorts/fWHLn3yTgKw"
    }
  },
  {
    "color": "hsl(229 68% 51%)",
    "created": "2025-09-26T14:22:49.843Z",
    "id": "175889656984390",
    "pinned": false,
    "tags": [
      "Youtube",
      "Anime"
    ],
    "text": "Screenshot from The Moment Kafka Hibino Gains His Aura ðŸ˜±âš¡ - YouTube",
    "type": "image",
    "versions": [
      {
        "date": "2025-09-26T14:35:10.903Z",
        "text": "Screenshot from The Moment Kafka Hibino Gains His Aura ðŸ˜±âš¡ - YouTube"
      },
      {
        "date": "2025-09-26T14:34:53.406Z",
        "text": "Screenshot from The Moment Kafka Hibino Gains His Aura ðŸ˜±âš¡ - YouTube"
      }
    ],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.youtube.com",
      "imageStored": false,
      "sourceUrl": "https://www.youtube.com/shorts/ACV1hTdrKzg"
    }
  },
  {
    "color": "hsl(296 60% 45%)",
    "created": "2025-09-26T14:28:56.585Z",
    "id": "1758896936585295",
    "pinned": false,
    "tags": [
      "Youtube"
    ],
    "text": "Screenshot from #banaraslitfest - YouTube",
    "type": "image",
    "versions": [],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.youtube.com",
      "imageStored": false,
      "sourceUrl": "https://www.youtube.com/shorts/hv875Jz4ZKo"
    }
  },
  {
    "color": "hsl(50 67% 47%)",
    "created": "2025-09-26T14:29:32.503Z",
    "id": "1758896972503870",
    "pinned": false,
    "tags": [
      "Youtube"
    ],
    "text": "Screenshot from Cool website âœ… - YouTube",
    "type": "image",
    "versions": [],
    "meta": {
      "favicon": "https://www.google.com/s2/favicons?domain=www.youtube.com",
      "imageStored": false,
      "sourceUrl": "https://www.youtube.com/shorts/-qtqbHeYJVQ"
    }
  }
]